#!/usr/bin/env bash

# Set working directory to home directory
cd "${HOME}"

# Purge the module environment to avoid conflicts
# module purge

# Generate SHA1 encrypted password (requires OpenSSL installed)
SALT=$(create_passwd 16)
PASSWORD_SHA1=$(echo -n "${password}${SALT}" | openssl dgst -sha1 | awk '{print $NF}')

# Change container image to my containers 
# Launch based on which container is selected. 
echo "Connection details: ${container} ${service}"

# Set apptainer directory with fallback logic
if [ -n "$SCRATCH" ] && [ -d "$SCRATCH" ]; then
    APPTAINER_DIR="$SCRATCH/.apptainer/on_demand_containers"
else
    APPTAINER_DIR="$(pwd)/apptainer"
fi

# Get container path based on selection
CONTAINER_FILE="${APPTAINER_DIR}/${container}.sif"
if [ -f "$CONTAINER_FILE" ]; then
    CONTAINER_PATH="$CONTAINER_FILE"
    INSTANCE_NAME="${container}"
else
    echo "Container not found: $CONTAINER_FILE"
    echo "Available containers in $APPTAINER_DIR:"
    ls -1 "$APPTAINER_DIR"/*.sif 2>/dev/null | xargs -n 1 basename | sed 's/\.sif$//' || echo "No containers found"
    exit 1
fi

# Launch the container with dynamic instance name from form.yml
apptainer instance start ${CONTAINER_PATH} ${INSTANCE_NAME}

if [ "${service}" == "jupyter" ]
then
  # there's a weird behavior here where the ServerApp arguments throw errors if they aren't in a certain order
  apptainer exec instance://${INSTANCE_NAME} jupyter lab \
    --ServerApp.ip=*  \
    --ServerApp.port=${port}  \
    --ServerApp.base_url=/node/${host}/${port}/ \
    --ServerApp.port_retries=0  \
    --ServerApp.password=sha1:${SALT}:${PASSWORD_SHA1} \
    --ServerApp.open_browser=False  \
    --ServerApp.disable_check_xsrf=True \
    --ServerApp.root_dir=$NOTEBOOK_ROOT \
    --ServerApp.allow_origin=*
elif [ "${service}" == "code-server" ]
then
  export PASSWORD="$password"
  apptainer exec instance://${INSTANCE_NAME} code-server \
    --bind-addr="0.0.0.0:${port}" \
    --auth="password"
fi
